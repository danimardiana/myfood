@page "/"

<h1>Settings</h1>
Configure your local parameters.

<div class="col-md-6">

        <h4>Enable Connectivity</h4>
        <RadzenSelectBar @bind-Value="isSigfoxConnectivityType" TValue="bool" Change="@((args) => Change(args, "SelectBar with single selection"))" Style="margin-bottom: 20px;">
            <Items>
                <RadzenSelectBarItem Text="SIGFOX" Value="true" />
                <RadzenSelectBarItem Text="WIFI" Value="false" />
            </Items>
        </RadzenSelectBar>

        <h4>Sigfox Hardware Version</h4>
        <RadzenSelectBar @bind-Value="isSigfoxVersionOne" TValue="bool" Change="@((args) => Change(args, "SelectBar with single selection"))" Style="margin-bottom: 20px;">
            <Items>
                <RadzenSelectBarItem Text="v.1" Value="true" />
                <RadzenSelectBarItem Text="v.2" Value="false" />
            </Items>
        </RadzenSelectBar>

        <h4>Debug LEDs</h4>
        <RadzenSelectBar @bind-Value="userSettings.isDebugLedEnable" TValue="bool" Change="@((args) => Change(args, "SelectBar with single selection"))" Style="margin-bottom: 20px;">
            <Items>
                <RadzenSelectBarItem Text="ON" Value="true" />
                <RadzenSelectBarItem Text="OFF" Value="false" />
            </Items>
        </RadzenSelectBar>

        <h4>Diagnostic Mode</h4>
        <RadzenSelectBar @bind-Value="userSettings.isDiagnosticModeEnable" TValue="bool" Change="@((args) => Change(args, "SelectBar with single selection"))" Style="margin-bottom: 20px;">
            <Items>
                <RadzenSelectBarItem Text="ON" Value="true" />
                <RadzenSelectBarItem Text="OFF" Value="false" />
            </Items>
        </RadzenSelectBar>

        <h4>Air Temperature | Humidity sensor</h4>
        <RadzenSelectBar @bind-Value="userSettings.isTempHumiditySensorEnable" TValue="bool" Change="@((args) => Change(args, "SelectBar with single selection"))" Style="margin-bottom: 20px;">
            <Items>
                <RadzenSelectBarItem Text="ON" Value="true" />
                <RadzenSelectBarItem Text="OFF" Value="false" />
            </Items>
        </RadzenSelectBar>
        
        <br/>
        <RadzenButton Click="@((args) => SaveSettingsClick(args))" Text="Save Settings" style="width:100%; margin:40px"/>
</div>

<div class="col-md-6">
    <h4>Set Internal Clock</h4>
    Current Clock : @dateTimeValue

    <RadzenDatePicker TValue="DateTime?" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" Change="@(args => Change(args, "DatePicker with time", "MM/dd/yyyy HH:mm"))" DateFormat="MM/dd/yyyy HH:mm" />

    <RadzenButton Click="@((args) => SetInternalClockClick(args))" Text="Save Settings" style="width:100%; margin:40px"/>
</div>

@code {
    bool isSigfoxConnectivityType = false;
    bool isSigfoxVersionOne = false;

    DateTime dateTimeValue = DateTime.Now;
    UserSettings userSettings = new UserSettings();

    UserSettingsManager userSettingsManager = UserSettingsManager.GetInstance;
    ClockManager clockManager = ClockManager.GetInstance;

    protected override void OnInitialized()
    {  
        userSettings = userSettingsManager.GetUserSettings();

        isSigfoxConnectivityType = (userSettings.connectivityType == ConnectivityType.Sigfox) ? true : false;
        isSigfoxVersionOne = (userSettings.sigfoxVersion == SigfoxVersion.v1) ? true : false;
    
        if (clockManager != null)
        {
            Task.Run(async() => 
            {
                clockManager.InitClock();
                await Task.Delay(2000);
                dateTimeValue = clockManager.ReadDate();
                clockManager.Dispose();
            }).Wait();               
        }
    }

    void Change(object value, string name)
    {
        var str = value is IEnumerable<int> ? string.Join(", ", (IEnumerable<int>)value) : value;
        StateHasChanged();
    }

    void SaveSettingsClick(MouseEventArgs args)
    {
        userSettings.connectivityType = (isSigfoxConnectivityType == true) ? ConnectivityType.Sigfox : ConnectivityType.Wifi;
        userSettings.sigfoxVersion = (isSigfoxVersionOne == true) ? SigfoxVersion.v1 : SigfoxVersion.v2;
        userSettingsManager.SyncUserSettings(userSettings);
        StateHasChanged();
    }

    void SetInternalClockClick(MouseEventArgs args)
    {
        StateHasChanged();
    }

    void Change(DateTime? value, string name, string format)
    {
        StateHasChanged();
    }
}