// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using myfoodapp.Core.Model;

namespace myfoodapp.Core.Migrations
{
    [DbContext(typeof(LocalDataContext))]
    partial class LocalDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5");

            modelBuilder.Entity("myfoodapp.Core.Model.Measure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("captureDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("sensorId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("sensorId");

                    b.ToTable("Measures");
                });

            modelBuilder.Entity("myfoodapp.Core.Model.SensorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("lastCalibration")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SensorTypes");
                });

            modelBuilder.Entity("myfoodapp.Core.Model.Measure", b =>
                {
                    b.HasOne("myfoodapp.Core.Model.SensorType", "sensor")
                        .WithMany()
                        .HasForeignKey("sensorId");
                });
#pragma warning restore 612, 618
        }
    }
}
